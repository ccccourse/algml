ccckmit@gmail.com
請幫下列程式加上註解

```
def sort(a):
    for i in range(len(a)):
        for j in range(i):
            if (a[j] > a[i]):
                t = a[i]
                a[i] = a[j]
                a[j] = t
    return a

print('sort([3, 8, 2, 1, 5]=', sort([3,8,2,1,5]))
```
這段程式實現了一個名為「sort」的函數，它會接收一個包含整數的陣列作為參數，並將陣列中的整數按照從小到大的順序排序。函數的第一個迴圈（for i in range(len(a)):）會迭代遍歷陣列的每一個元素。第二個迴圈（for j in range(i):）則會逐一比較陣列中的每一個元素，如果參照的元素（a[j]）比當前的元素（a[i]）大，就交換它們的位置。最後，函數會回傳排序後的陣列。

程式的最後一行（print('sort([3, 8, 2, 1, 5]=', sort([3,8,2,1,5]))）則會呼叫函數，並印出它排序後的結果。




ccckmit@gmail.com
請幫下列程式加上註解

while (True):
    pass
這段程式是無限迴圈的範例。它會一直重複執行 pass 語句，因為迴圈的條件總是成立（True）。這段程式的作用是讓程式在某個特定的情況下無限迴圈，直到達到某個條件才能跳出迴圈。例如，可以用這段程式來實現一個程式，它會不斷地檢查用戶是否輸入了特定的字串，如果沒有，就繼續重複執行檢查。




ccckmit@gmail.com
請幫下列程式加上 comment

def distance(p1, p2):
    dx = p1['x'] - p2['x']
    dy = p1['y'] - p2['y']
    return dx*dx+dy*dy

p1 = {'x':3, 'y':4}
p2 = {'x': 0, 'y':0}

print(f'distance({p1},{p2})={distance(p1,p2)}')
這段程式實現了一個名為「distance」的函數，它會接收兩個包含「x」和「y」座標的字典作為參數，並計算這兩個點之間的欧拉距離。函數首先計算兩個點在 x 座標和 y 座標上的差值（dx = p1['x'] - p2['x'] 和 dy = p1['y'] - p2['y']），然後將這兩個差值的平方和作為欧拉距離的平方（dx*dx+dy*dy），最後回傳這個值。

在程式的最後，它會定義兩個字典（p1 和 p2）並計算它們之間的欧拉距離。程式最後一行（print(f'distance({p1},{p2})={distance(p1,p2)}')）則會呼叫函數，並印出它計算得到的結果。




ccckmit@gmail.com
請幫下列程式加上註解

class Node():
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList():
    def __init__(self):
        self.head = None
        self.tail = self.head

    def append(self, data):
        new_node = Node(data)
        if self.head == None:
            self.head = new_node
            self.tail = self.head
        else:
            self.tail.next = new_node
            self.tail = new_node

    def print(self):
        if self.head == None:
            print("None")
        else:
            current_node = self.head
            while current_node!= None:
                print(current_node.data, end= ' ')
                current_node = current_node.next
            print("None")

list1 = LinkedList()
list1.print()

list1.append("a")
list1.append(1)
list1.append(3.14159)
list1.append(["b","c"])
list1.print()

這段程式實現了一個名為「Node」的類別，它代表了一個連結串列（linked list）中的節點（node）。每個節點都包含一個數據（data）和一個指向下一個節點的指標（next）。

類別「Node」包含一個構造函數（__init__），它會在建立節點時被呼叫，並接收一個參數作為節點的數據。構造函數會將這個數據存到節點的數據屬性中，並將指標屬性初始化為 None。

程式中的第二個類別「LinkedList」則代表了一個連結串列。這個類別包含一個構造函數，它會建立一個空的連結串列。構造函數會初始化串列的「頭（head）」和「尾（tail）」指標，並將它們初始化為 None。

「LinkedList」類別還包含兩個方法：

append：這個方法會接收一個參數作為新節點的數據，並在連結串列的末尾添加一個新的節點。如果連結串列是空的，那麼新節點就會成為串列的頭節點。否則，就會在尾節點的指標屬性中指向新節點，並將尾節



ccckmit@gmail.com
繼續
點指標更新為新節點。

print：這個方法會印出連結串列中的所有節點。如果串列為空，則會印出「None」。否則，會從頭節點開始，逐一印出每個節點的數據，直到末尾為止。
在程式的最後，它會創建一個「LinkedList」類別的實例（list1），並呼叫它的 print 方法。此時，串列是空的，因此會印出「None」。接下來，程式會呼叫「list1」的 append 方法，添加四個節點到連結串列中。最後，它再次呼叫 print 方法，印出連結串列中的所有節點。




ccckmit@gmail.com
請幫下列程式加上註解

#include <stdio.h>

int sum(int n) {
    int s=0, i=1;
_begin:
    // while (i <= n) {
    if (i>n) goto _end;
    s+=i;
    i++;
    goto _begin;
_end:
    return s;
}

int main() {
    printf("sum(10)=%d\n", sum(10));
    printf("sum(100)=%d\n", sum(100));
}
這段程式實現了一個名為「sum」的函數，它會接收一個整數作為參數，並計算 1 到這個整數之間的所有整數的總和。函數中定義了兩個變數：「s」表示總和，「i」表示計數器。

在函數的主體中，它使用了無限迴圈（while 語句）來遍歷 1 到 n 之間的所有整數。每次迴圈會將計數器加一，並將計數器的值加到總和中。當計數器超過 n 時，迴圈就會停止。最後，函數會回傳總和。

在程式的最後，它會呼叫「sum」函數並印出它計算得到的結果。第一個呼叫（sum(10)）會計算 1 到 10 的所有整數的總和，第二個呼叫（sum(100)）則會計算 1 到 100 的所有整數的總和。




ccckmit@gmail.com
請幫下列程式加上逐行的註解，直接註解在程式裡面


#include <stdio.h>

int main() {
    int n=10;
    int s=0, i=1;
_begin:
    if (i>n) goto _end;
    s+=i;
    i++;
    goto _begin;
_end:

    printf("sum(10)=%d\n", s);

    n = 100;
    s = 0; i=1;
_begin2:
    if (i>n) goto _end2;
    s+=i;
    i++;
    goto _begin2;
_end2:
    printf("sum(100)=%d\n", s);
}
這段程式實現了一個程序，它會計算 1 到 10 和 1 到 100 的所有整數的總和，並印出結果。

在主程序中，它首先定義了一個整數變數「n」，並將它初始化為 10。它也定義了兩個變數：「s」表示總和，「i」表示計數器。

接下來，程式會進入一個無限迴圈。這個迴圈使用了 goto 語句（goto _begin）來實現，並透過一個條件判斷（if (i>n) goto _end）來控制迴圈的停止。每次迴圈會將計數器加一，並將計數器的值加到總和中。當計數器超過 n 時，它會使用 goto 語句（goto _end）跳出迴圈。

在迴圈結束後，程式會印出 1 到 10 的所有整數的總和（printf("sum(10)=%d\n", s)）。

接下來，程




ccckmit@gmail.com
繼續
式會將「n」的值更新為 100，並將「s」和「i」的值重置為 0 和 1。它再次進入一個無限迴圈，遍歷 1 到 100 的所有整數，並計算它們的總和。迴圈的控制方式和上一個迴圈是一模一樣的，只是迴圈的起點和終點的名稱不同。

在迴圈結束後，程式會印出 1 到 100 的所有整數的總和（printf("sum(100)=%d\n", s)）。




ccckmit@gmail.com
請逐行加上程式註解

C = [[None]*100 for _ in range(100)]

def c(n, k):
    if k < 0 or k > n: return 0
    if not C[n][k] is None: return C[n][k]
    if k==0 or n <= 1:
        C[n][k] = 1
    else:
        C[n][k] = c(n-1,k) + c(n-1, k-1)
    return C[n][k]

print("c(5,2)=", c(5,2))
print("c(7,3)=", c(7,3))
print("c(12,5)=", c(12,5))
print("c(60,30)=", c(60,30))
這段程式實現了一個函數「c」，用來計算組合數。它接收兩個參數：「n」和「k」，並回傳由「n」個物品中選取「k」個物品的方案數。

首先，程式定義了一個二維數組「C」，大小為 100x100。它用來儲存計算得到的組合數，以便加快計算的速度。

接下來，它定義了「c」函數。在函數的主體中，它首先進行了幾個特殊情況的檢查。如果「k」小於 0 或大於「n」，那麼函數就會直接返回 0。如果「C」數組在索引「n」和「k」的位置上已經有計算結果，那麼函數就會直接返回計算結果。如果「k」等於 0 或「n」小於等於 1，那麼函數就會將「C」數組在索引「n」和「k」的位置上的值更新為 1，並返回 1。

如果「k」大於 0，且「n」大於 1，那麼函數會將「C」數組在索引「n」和「k」的位置上的值更新為「c(n-1,k)」和「c(n-1,k-1)」的和，然後返回計算結果。

最後，程式會呼叫「c」函數來計算幾組組合數，並印出結果。




ccckmit@gmail.com
請幫下列程式加上註解

def grad(f, p):
    gp = p.copy()
    for k in range(len(p)):
        gp[k] = df(f, p, k)
    return gp
這段程式實現了一個名為「grad」的函數，它用來計算函數「f」在點「p」处的梯度。

「grad」函數接收兩個參數：「f」和「p」。「f」是要求梯度的函數，「p」是函數「f」的輸入參數。函數中定義了一個名為「gp」的變數，它是一個陣列，用來儲存函數「f」在點「p」处的梯度值。

接下來，函數會遍歷「p」的每一個維度，計算出「f」在點「p」处的梯度值，並將它們存入「gp」陣列中。計算方式可能需要依賴外部函數「df」，它用來計算函數「f」在點「p」处的偏導數。

最後，函數會回傳「gp」陣列。




ccckmit@gmail.com
請幫下列程式加上註解

def df(f, p, k):
    p1 = p.copy()
    p1[k] = p[k]+step
    return (f(p1) - f(p)) / step
這段程式實現了一個名為「df」的函數，它用來計算函數「f」在點「p」处的某個維度的偏導數。

「df」函數接收三個參數：「f」，「p」和「k」。「f」是要求偏導數的函數，「p」是函數「f」的輸入參數，「k」是要求偏導數的維度。函數中定義了一個名為「p1」的變數，它是「p」的一個副本。

接下來，函數會將「p1」的第「k」個維度加上一個小量「step」。然後，它會計算出函數「f」在點「p1」处的值和函數「f」在點「p」处的值的差除以「step」，並回傳計算結果。

這段程式使用了差分法來計算偏導數。這種方法不是很精確，會受到「step」的大小影響。但它非常容易實現，適合用於數值運算中快速計算偏導數。




ccckmit@gmail.com
請解說下列程式

If  = lambda cond: lambda a: lambda b: a() if cond else b()

Fibonacci = lambda n: \
  If(n<2)(lambda:n)(lambda:Fibonacci(n-1)+Fibonacci(n-2))

print('Fibonacci(8)=', Fibonacci(8))
這段程式實現了一個「Fibonacci」函數，用來計算斐波那契數列的某個數。「Fibonacci」函數接收一個參數「n」，並回傳斐波那契數列第「n」項的值。

首先，程式定義了一個匿名函數「If」，它接收一個條件表達式「cond」，並回傳一個新函數。這個新函數接收兩個函數「a」和「b」，並回傳「a」或「b」，取決於「cond」是否為真。

接下來，「Fibonacci」函數就是利用「If」函數來實現的。它首先檢查「n」是否小於 2，如果是，則直接回傳「n」；否則，它會呼叫「Fibonacci」函數兩次，分別計算「n-1」和「n-2」的值，然後將這兩個值相加，並回傳計算結果。

最後，




ccckmit@gmail.com
繼續
最後，程式會呼叫「Fibonacci」函數來計算斐波那契數列的第 8 項，並將結果顯示在螢幕上。

這段程式使用了「非常函數」的概念，來實現遞迴計算斐波那契數列。「非常函數」是一種特殊的函數，它可以接收其他函數作為參數，並回傳一個新函數。這種函數的特殊性質使得它可以實現一些非常靈活的計算方式。

在這段程式中，「If」函數就是一個非常函數。它接收一個條件表達式和兩個函數，並回傳一個新函數。這個新函數的行為取決於條件表達式的真假，如果條件表達式為真，則執行第一個函數；否則，執行第二個函數。

「Fibonacci」函數利用「If」函數來實現遞迴計算斐波那契數列。它首先檢查「n」是否小於 2，如果是，則直接回傳「n」；否則，它會呼叫「Fibonacci」函數兩次，分別計算「n-1」和「n-2」的值，然後將這兩個值相加，並回傳計算結果。這種方式使得「Fibonacci」函數可以遞迴地計算斐波那契數列。




ccckmit@gmail.com
請解說下列程式

Y = lambda g:g(lambda:Y(g)) # Y(g) = g() = Y(g)

fact = Y( # fact = Y(g) = g() = fact
    lambda g: # g for self-referencing
        lambda x: # this curryed function is returned by g()
            1 if x == 0 else x * g()(x - 1) # g() = fact
)

print('fact(5)=', fact(5))
這段程式實現了一個「fact」函數，用來計算階乘。「fact」函數接收一個參數「x」，並回傳「x」的階乘。

首先，程式定義了一個匿名函數「Y」，它接收一個函數「g」，並回傳「g」的值。但是，「g」的值又是「Y」的值，因此「Y」的值就是「g」的值，即「Y」的值等於「g」的值。這種特殊的函數叫做「高階函數」，它可以用於實現「自然遞迴」。

接下來，「fact」函數是用「Y」函數實現的。「Y」函數接收一個名為「g」的匿名函數，這個函數接收一個參數「x」，並根據「x」的值，來計算「x」的階乘。如果「x」等於 0，則直接回傳 1；否則，它會呼叫「g」函數來計算「x-1」的階乘，然後將「x」和「x-1」的階乘相乘，並回傳計算結果。

由




ccckmit@gmail.com
繼續
由於「Y」函數的值等於「g」函數的值，因此「g」函數的值也等於「g」函數的值。因此「fact」函數就可以遞迴地計算「x」的階乘。

最後，程式會呼叫「fact」函數來計算 5 的階乘，並將結果顯示在螢幕上。

這段程式使用了「高階函數」的概念，來實現自然遞迴計算階乘。「高階函數」是一種特殊的函數，它可以接收其他函數作為參數，並回傳一個新函數。這種函數的特殊性質使得它可以實現一些非常靈活的計算方式。

在這段程式中，「Y」函數就是一個高階函數。它接收一個函數「g」，並回傳「g」的值。但是，「g」的值又是「Y」的值，因此「Y」的值就是「g」的值，即「Y」的值等於「g」的值




ccckmit@gmail.com
繼續
「Y」函數的特殊性質可以讓我們實現「自然遞迴」，即一個函數的值等於該函數的值。

在這段程式中，「fact」函數就是用「Y」函數實現的。「Y」函數接收一個名為「g」的匿名函數，這個函數會根據「x」的值，來計算「x」的階乘。如果「x」等於 0，則直接回傳 1；否則，它會呼叫「g」函數來計算「x-1」的階乘，然後將「x」和「x-1」的階乘相乘，並回傳計算結果。

由於「Y」函數的值等於「g」函數的值，因此「g」函數的值也等於「g」函數的值。因此「fact」函數就可以遞迴地計算「x」的階乘。

最後，程式會呼叫「fact」函數來計算 5 的階乘，並將